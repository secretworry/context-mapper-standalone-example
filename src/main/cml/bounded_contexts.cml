import "./domains.cml"
/* Bounded Context Definitions */
BoundedContext CustomerManagementContext implements CustomerManagementDomain {
	type = FEATURE
	domainVisionStatement = "The customer management context is responsible for managing all the data of the insurance companies customers."
	implementationTechnology = "Java, JEE Application"
	responsibilities = "Customers, Addresses"

	Aggregate Customers {
		Entity Customer {
			aggregateRoot

			- SocialInsuranceNumber sin
			String firstname
			String lastname
			- List<Address> addresses

			def AddressId createAddress(@Address address);
			def boolean changeCustomer(String firstname, String lastname);
		}

		Entity Address {
			String street
			int postalCode
			String city
		}

		ValueObject SocialInsuranceNumber {
			String sin key
		}
	}

}

BoundedContext CustomerSelfServiceContext implements CustomerManagementDomain {
	type = APPLICATION
	domainVisionStatement = "This context represents a web application which allows the customer to login and change basic data records like the address."
	responsibilities = "AddressChange"
	implementationTechnology = "PHP Web Application"

	Aggregate CustomerFrontend {
		Entity CustomerAddressChange {
			aggregateRoot

			- UserAccount issuer
			- Address changedAddress
		}
	}

	Aggregate Acounts {
		Entity UserAccount {
			aggregateRoot

			String username
			- Customer accountCustomer
		}
	}
}

BoundedContext PrintingContext implements PrintingDomain {
	type = SYSTEM
	responsibilities = "Document Printing"
	domainVisionStatement = "An external system which provides printing services to the other Bounded Contexts."

	Aggregate Printing {
		Entity PrintingJob {
			aggregateRoot

			int printingId
			- Document document
			- Template template

			def PrintStatus printJob(PrintingId printingId);
		}

		Entity Document {
			DomainObject source
			String template
		}
	}

	Aggregate Templating {
		Entity Template {
			aggregateRoot

			int templateId
			String templateName
		}
	}
}

BoundedContext PolicyManagementContext implements PolicyManagementDomain {
	type = FEATURE
	domainVisionStatement = "This bounded context manages the contracts and policies of the customers."
	responsibilities = "Offers, Contracts, Policies"
	implementationTechnology = "Java, Spring App"

	Aggregate Offers {
		Entity Offer {
			aggregateRoot

			int offerId
			- Customer client
			- List<Product> products
			BigDecimal price
		}
	}

	Aggregate Products {
		Entity Product {
			aggregateRoot

			- ProductId identifier
			String productName
		}

		ValueObject ProductId {
			int productId key
		}
	}

	Aggregate Contract {
		Entity Contract {
			aggregateRoot

			- ContractId identifier
			- Customer client
			- List<Product> products
		}

		ValueObject ContractId {
			int contractId key
		}

		Entity Policy {
			int policyNr
			- Contract contract
			BigDecimal price
		}
	}
}

BoundedContext RiskManagementContext implements RiskManagementDomain {
	type = FEATURE
	domainVisionStatement = "Uses data from PolicyManagement context to calculate risks."
	responsibilities = "Customer Risk Calculation"
	implementationTechnology = "Java, Spring App"

	Aggregate Risks {
		Entity CustomerRiskFactor {
			aggregateRoot

			int totalRiskFactor
			- List<Risk> risks
			- Customer client
		}

		ValueObject Risk {
			int likelihood
			String risk
		}
	}
}

BoundedContext DebtCollection implements DebtsDomain {
	type = FEATURE
	domainVisionStatement = "The debt collection context is responsible for the financial income of the insurance company (the debts) which depend on the corresponding contracts and policies."
	responsibilities = "Debts, Dunning"
	implementationTechnology = "JEE"

	Aggregate Debts {
		Entity Debt {
			aggregateRoot

			int debtNr
			- Policy policy
			Date creationDate
			Date paymentDate
			Date paymentDeadline
			BigDecimal price
			PaymentStatus status
			- List<Dunning> dunnigs
		}

		Entity Dunning {
			int dunningNr
			- Debt debt
			Date dunningDate
			Date paymentDeadline
		}
	}
}
